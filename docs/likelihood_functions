Likelihood functions
--------------------

Bayesian model estimation involves maximising the likelihood of the observed data given the model and parameter values. To achieve this, we assume that the observed data is drawn from some distribution and we maximise the appropriate likelihood function for this distribution during model fitting.

DMpy makes it simple to assign the appropriate likelihood function for the observed data. The ``DMModel`` class takes an argument ``logp_function``, which in basic usage can simply be set to one of three common distributions: ``'bernoulli'`` if the observed responses are binary, ``'beta'`` if the observed responses lie between zero and one, or ``'normal'`` if the responses are continuous. DMpy will then take care of the rest - for beta or normally distributed observations this involves creating an additional estimated parameter for the standard deviation of this distribution, which will be estimated during model fitting.

However DMpy is designed with flexibility in mind, so it is possible to specify custom likelihood functions. To do this, a custom function can be passed to the ``logp_function`` argument when creating ``DMModel`` instance. This function should take at least one input (generated by the learning and observation models), and return a PyMC3 distribution. For example, in the case of the built-in beta likelihood function, the function is as follows:

.. code-block:: python

    def beta_likelihood(mu=None, phi_mu=0, phi_sd=100 ** 2):

        phi = T.exp(pm.Normal('phi', mu=phi_mu, sd=phi_sd))

        return pm.Beta.dist(alpha=mu * phi, beta=(1 - mu) * phi)


This function takes a value generated by the model, which is then used as the mean of a beta distribution (``mu``). In this parameterisation of the beta distribution we also require a precision parameter (``phi``), which is created as the exponent of a normally distributed variable (defined using the PyMC3 ``Normal`` class). The ``phi`` parameter will then be estimated along with the model parameters during model fitting. Note that the returned value of the function is the ``.dist`` attribute of the PyMC3 ``Beta`` class.

A further necessary step when implementing a custom likelihood function is determining which outputs from the model will be used by the likelihood function. This is achieved by passing a dictionary to the ``logp_args`` argument of the DMModel class. This dictionary should contain keys corresponding to the keyword arguments of the custom likelihood function and values representing their values. Importantly, the value of an argument in this dictionary can represent an output of the model by setting it to a string representing the name of the output of the model. For example, if above we wanted to set the ``mu`` argument of the ``beta_likelihood`` function to be the ``value`` output of our model (perhaps our model returns something like ``return (value, prediction_error)`` and the standard deviation of the prior on the phi term to 10, we can set the ``logp_args`` argument to ``{'mu': 'value', 'phi_sd': 10}``.

This needs to be modified to deal with outputs of the observation model